---
source: crates/shinier_rb_formatter/tests/snapshot_test.rs
assertion_line: 509
expression: output
input_file: crates/shinier_rb_formatter/tests/ruby/node/call_node.rb
---
****FORMATTED****
foo
foo
foo(bar)
foo(
  bar,
  baz,
  bazz,
  bar,
  baz,
  bazz,
  bar,
  baz,
  bazz,
  a: bar,
  b: baz,
  c: bazz
)
foo.+@
foo.+(bar)
foo.bar
foo&.bar
foo.|(bar)
foo.^(bar)
foo.&(bar)
foo.<=>(bar)
foo.==(bar)
foo.===(bar)
foo.=~(bar)
foo.>(bar)
foo.>=(bar)
foo.<(bar)
foo.<=(bar)
foo.<<(bar)
foo.>>(bar)
foo.+(bar)
foo.-(bar)
foo.*(bar)
foo./(bar)
foo.%(bar)
foo.**(bar)
foo(bar.~)
foo.+@
foo.-@
foo.[](bar)
foo.[]=(bar, baz)
`foo`
foo.!
foo.!=(bar)
foo.!~(bar)
foo += bar
foo -= bar
foo *= bar
foo /= bar
foo %= bar
foo **= bar
foo &= bar
foo |= bar
foo ^= bar
foo <<= bar
foo >>= bar
foo &&= bar
foo ||= bar
foo(&bar)&bar
foo(bar, &baz)&baz
foo{ puts("x") }
foo{ |x| x.*(2) }
foo(bar){ |a, b| p([a, b]) }
foo{ |(a, b)| p(a, b) }
foo.bar{ |v| v }
foo&.bar{ |v| v }
foo(&proc_obj)&proc_obj
foo && bar
foo && bar
foo || bar
foo || bar
foo.!
foo.!

****AST****
ProgramNode: "foo\nfoo()\nfoo(bar)\nfoo(bar, baz, bazz, bar, baz, bazz, bar, baz, bazz, a: bar, b: baz, c: bazz)\n+foo\nfoo + bar\nfoo.bar\nfoo&.bar\n\n# operator method calls\nfoo | bar\nfoo ^ bar\nfoo & bar\nfoo <=> bar\nfoo == bar\nfoo === bar\nfoo =~ bar\nfoo > bar\nfoo >= bar\nfoo < bar\nfoo <= bar\nfoo << bar\nfoo >> bar\nfoo + bar\nfoo - bar\nfoo * bar\nfoo / bar\nfoo % bar\nfoo ** bar\nfoo ~ bar\n+foo # foo +@ bar\n-foo # foo -@ bar\nfoo[bar] # foo [] bar\nfoo[bar] = baz # foo []= bar\n`foo` # foo ` bar\n!foo # foo ! bar\nfoo != bar\nfoo !~ bar\n\n# self-defined method calls\nfoo += bar\nfoo -= bar\nfoo *= bar\nfoo /= bar\nfoo %= bar\nfoo **= bar\nfoo &= bar\nfoo |= bar\nfoo ^= bar\nfoo <<= bar\nfoo >>= bar\nfoo &&= bar\nfoo ||= bar\n\n# block\nfoo(&bar)\nfoo(bar, &baz)\n\n# block literals (single-line and multi-line)\nfoo { puts \"x\" }\nfoo do |x|\n\tx * 2\nend\n\n# block with explicit arguments and destructuring\nfoo(bar) { |a, b| p [a, b] }\nfoo { |(a, b)| p a, b }\n\n# method call with block (receiver method)\nfoo.bar { |v| v }\nfoo&.bar { |v| v }\n\n# passing a Proc/lambda as a block\nfoo(&proc_obj)\n\n\nfoo and bar\nfoo && bar\nfoo or bar\nfoo || bar\nnot foo\n!foo"
__CallNode: "foo"
__CallNode: "foo()"
__CallNode: "foo(bar)"
____CallNode: "bar"
__CallNode: "foo(bar, baz, bazz, bar, baz, bazz, bar, baz, bazz, a: bar, b: baz, c: bazz)"
____CallNode: "bar"
____CallNode: "baz"
____CallNode: "bazz"
____CallNode: "bar"
____CallNode: "baz"
____CallNode: "bazz"
____CallNode: "bar"
____CallNode: "baz"
____CallNode: "bazz"
____KeywordHashNode: "a: bar, b: baz, c: bazz"
______AssocNode: "a: bar"
________SymbolNode: "a:"
________CallNode: "bar"
______AssocNode: "b: baz"
________SymbolNode: "b:"
________CallNode: "baz"
______AssocNode: "c: bazz"
________SymbolNode: "c:"
________CallNode: "bazz"
__CallNode: "+foo"
____CallNode: "foo"
__CallNode: "foo + bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo.bar"
____CallNode: "foo"
__CallNode: "foo&.bar"
____CallNode: "foo"
__CallNode: "foo | bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo ^ bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo & bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo <=> bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo == bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo === bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo =~ bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo > bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo >= bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo < bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo <= bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo << bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo >> bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo + bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo - bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo * bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo / bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo % bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo ** bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo ~ bar"
____CallNode: "~ bar"
______CallNode: "bar"
__CallNode: "+foo"
____CallNode: "foo"
__CallNode: "-foo"
____CallNode: "foo"
__CallNode: "foo[bar]"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo[bar] = baz"
____CallNode: "foo"
____CallNode: "bar"
____CallNode: "baz"
__XStringNode: "`foo`"
__CallNode: "!foo"
____CallNode: "foo"
__CallNode: "foo != bar"
____CallNode: "foo"
____CallNode: "bar"
__CallNode: "foo !~ bar"
____CallNode: "foo"
____CallNode: "bar"
__LocalVariableOperatorWriteNode: "foo += bar"
____CallNode: "bar"
__LocalVariableOperatorWriteNode: "foo -= bar"
____CallNode: "bar"
__LocalVariableOperatorWriteNode: "foo *= bar"
____CallNode: "bar"
__LocalVariableOperatorWriteNode: "foo /= bar"
____CallNode: "bar"
__LocalVariableOperatorWriteNode: "foo %= bar"
____CallNode: "bar"
__LocalVariableOperatorWriteNode: "foo **= bar"
____CallNode: "bar"
__LocalVariableOperatorWriteNode: "foo &= bar"
____CallNode: "bar"
__LocalVariableOperatorWriteNode: "foo |= bar"
____CallNode: "bar"
__LocalVariableOperatorWriteNode: "foo ^= bar"
____CallNode: "bar"
__LocalVariableOperatorWriteNode: "foo <<= bar"
____CallNode: "bar"
__LocalVariableOperatorWriteNode: "foo >>= bar"
____CallNode: "bar"
__LocalVariableAndWriteNode: "foo &&= bar"
____CallNode: "bar"
__LocalVariableOrWriteNode: "foo ||= bar"
____CallNode: "bar"
__CallNode: "foo(&bar)"
____BlockArgumentNode: "&bar"
______CallNode: "bar"
__CallNode: "foo(bar, &baz)"
____CallNode: "bar"
____BlockArgumentNode: "&baz"
______CallNode: "baz"
__CallNode: "foo { puts \"x\" }"
____BlockNode: "{ puts \"x\" }"
______StatementsNode: "puts \"x\""
________CallNode: "puts \"x\""
__________StringNode: "\"x\""
__CallNode: "foo do |x|\n\tx * 2\nend"
____BlockNode: "do |x|\n\tx * 2\nend"
______BlockParametersNode: "|x|"
________RequiredParameterNode: "x"
______StatementsNode: "x * 2"
________CallNode: "x * 2"
__________LocalVariableReadNode: "x"
__________IntegerNode: "2"
__CallNode: "foo(bar) { |a, b| p [a, b] }"
____CallNode: "bar"
____BlockNode: "{ |a, b| p [a, b] }"
______BlockParametersNode: "|a, b|"
________RequiredParameterNode: "a"
________RequiredParameterNode: "b"
______StatementsNode: "p [a, b]"
________CallNode: "p [a, b]"
__________ArrayNode: "[a, b]"
____________LocalVariableReadNode: "a"
____________LocalVariableReadNode: "b"
__CallNode: "foo { |(a, b)| p a, b }"
____BlockNode: "{ |(a, b)| p a, b }"
______BlockParametersNode: "|(a, b)|"
________MultiTargetNode: "(a, b)"
__________RequiredParameterNode: "a"
__________RequiredParameterNode: "b"
______StatementsNode: "p a, b"
________CallNode: "p a, b"
__________LocalVariableReadNode: "a"
__________LocalVariableReadNode: "b"
__CallNode: "foo.bar { |v| v }"
____LocalVariableReadNode: "foo"
____BlockNode: "{ |v| v }"
______BlockParametersNode: "|v|"
________RequiredParameterNode: "v"
______StatementsNode: "v"
________LocalVariableReadNode: "v"
__CallNode: "foo&.bar { |v| v }"
____LocalVariableReadNode: "foo"
____BlockNode: "{ |v| v }"
______BlockParametersNode: "|v|"
________RequiredParameterNode: "v"
______StatementsNode: "v"
________LocalVariableReadNode: "v"
__CallNode: "foo(&proc_obj)"
____BlockArgumentNode: "&proc_obj"
______CallNode: "proc_obj"
__AndNode: "foo and bar"
____LocalVariableReadNode: "foo"
____CallNode: "bar"
__AndNode: "foo && bar"
____LocalVariableReadNode: "foo"
____CallNode: "bar"
__OrNode: "foo or bar"
____LocalVariableReadNode: "foo"
____CallNode: "bar"
__OrNode: "foo || bar"
____LocalVariableReadNode: "foo"
____CallNode: "bar"
__CallNode: "not foo"
____LocalVariableReadNode: "foo"
__CallNode: "!foo"
____LocalVariableReadNode: "foo"
